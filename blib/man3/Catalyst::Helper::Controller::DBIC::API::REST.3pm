.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Helper::Controller::DBIC::API::REST 3"
.TH Catalyst::Helper::Controller::DBIC::API::REST 3 "2009-06-25" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "NAME"
Catalyst::Helper::Controller::DBIC::API::REST
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    $ catalyst.pl myapp
\&    $ cd myapp
\&    $ script/myapp_create.pl controller API::REST DBIC::API::REST myapp
\&
\&    ...
\&
\&    package myapp::Controller::API::REST::Producer;
\&
\&    use strict;
\&    use warnings;
\&    use base qw/myapp::ControllerBase::REST/;
\&    use JSON::Syck;
\&
\&    _\|_PACKAGE_\|_\->config(
\&        action                  =>  { setup => { PathPart => \*(Aqproducer\*(Aq, Chained => \*(Aq/api/rest/rest_base\*(Aq } },
\&                                    # define parent chain action and partpath
\&        class                   =>  \*(AqDB::Producer\*(Aq, # DBIC result class
\&        create_requires         =>  [qw/name/], # columns required to create
\&        create_allows           =>  [qw//], # additional non\-required columns that create allows
\&        update_allows           =>  [qw/name/], # columns that update allows
\&        list_returns            =>  [qw/producerid name/], # columns that list returns
\&
\&
\&        list_prefetch_allows    =>  [ # every possible prefetch param allowed
\&            [qw/cd_to_producer/], {  \*(Aqcd_to_producer\*(Aq => [qw//] },
\&            [qw/tags/], {  \*(Aqtags\*(Aq => [qw//] },
\&            [qw/tracks/], {  \*(Aqtracks\*(Aq => [qw//] },
\&            
\&        ],
\&
\&        list_ordered_by         => [qw/producerid/], # order of generated list
\&        list_search_exposes     => [
\&            qw/producerid name/,
\&            
\&        ], # columns that can be searched on via list
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&  This creates REST controllers according to the specifications at L<Catalyst::Controller::DBIC::API> and L<Catalyst::Controller::DBIC::API::REST> for all the classes in your Catalyst app. Your application must access your model at myapp::Model::DB.
\&
\&  It creates the following files:
\&    
\&    myapp/lib/myapp/Controller/API.pm
\&    myapp/lib/myapp/Controller/API/REST.pm
\&    myapp/lib/myapp/Controller/API/REST/*   (this is where the individual class controllers are located)
\&    myapp/lib/myapp/ControllerBase/REST.pm
.Ve
.Sh "\s-1CONFIGURATION\s0"
.IX Subsection "CONFIGURATION"
.Vb 1
\&    The idea is to make configuration as painless and as automatic as possible, so most of the work has been done for you.
\&    
\&    There are 8 _\|_PACKAGE_\|_\->config(...) options for L<Catalyst::Controller::DBIC::API/CONFIGURATION>. Here are the defaults.
.Ve
.Sh "create_requires"
.IX Subsection "create_requires"
.Vb 1
\&    All non\-nullable columns that are (1) not autoincrementing, (2) don\*(Aqt have a default value, are neither (3) nextvals, (4) sequences, or (5) timestamps
.Ve
.Sh "create_allows"
.IX Subsection "create_allows"
.Vb 1
\&    All nullable columns that are (1) not autoincrementing, (2) don\*(Aqt have a default value, are neither (3) nextvals, (4) sequences, or (5) timestamps.
.Ve
.Sh "update_allows"
.IX Subsection "update_allows"
.Vb 1
\&    The union of create_requires and create_allows.
.Ve
.Sh "list_returns"
.IX Subsection "list_returns"
.Vb 1
\&    Every column in the class.
.Ve
.Sh "list_prefetch"
.IX Subsection "list_prefetch"
.Vb 1
\&    Nothing is prefetched by default.
.Ve
.Sh "list_prefetch_allows"
.IX Subsection "list_prefetch_allows"
.Vb 1
\&    (1) An arrayref consisting of the name of each of the class\*(Aqs has_many relationships, accompanied by (2) a hashref keyed on the name of that relationship, whose values are the names of its has_many\*(Aqs, e.g., in the "Producer" controller above, a Producer has many cd_to_producers, many tags, and many tracks. None of those classes have any has_many\*(Aqs:
\&
\&    list_prefetch_allows    =>  [
\&        [qw/cd_to_producer/], {  \*(Aqcd_to_producer\*(Aq => [qw//] },
\&        [qw/tags/], {  \*(Aqtags\*(Aq => [qw//] },
\&        [qw/tracks/], {  \*(Aqtracks\*(Aq => [qw//] },
\&    ],
.Ve
.Sh "list_ordered_by"
.IX Subsection "list_ordered_by"
.Vb 1
\&    The primary key.
.Ve
.Sh "list_search_exposes"
.IX Subsection "list_search_exposes"
.Vb 1
\&    (1) An arrayref consisting of the name of each column in the class, and (2) a hashref keyed on the name of each of the class\*(Aqs has many relationships, the values of which are all the columns in the corresponding class, e.g., 
\&
\&    list_search_exposes     => [
\&        qw/cdid artist title year/,
\&        { \*(Aqcd_to_producer\*(Aq => [qw/cd producer/] },
\&        { \*(Aqtags\*(Aq => [qw/tagid cd tag/] },
\&        { \*(Aqtracks\*(Aq => [qw/trackid cd position title last_updated_on/] },
\&    ], # columns that can be searched on via list
.Ve
.SH "CONTROLLERBASE"
.IX Header "CONTROLLERBASE"
.Vb 1
\&    Following the advice in L<Catalyst::Controller::DBIC::API/EXTENDING>, this module creates an intermediate class between your controllers and L<Catalyst::Controller::DBIC::API::REST>. It contains one method, create, which serializes object information and stores it in the stash, which is not the default behavior.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "mk_compclass"
.IX Subsection "mk_compclass"
This is the meat of the helper. It writes the directory structure if it is not in place, \s-1API\s0.pm, \s-1REST\s0.pm, the controllerbase, and the result class controllers. It replaces \f(CW$helper\fR\->{} values as it goes through, rendering the files for each.
.SH "AUTHOR"
.IX Header "AUTHOR"
Amiri Barksdale <amiri@metalabel.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "NAME"
[% CLASS %] \- REST Controller for [% schema_class %]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1REST\s0 Methods to access the \s-1DBIC\s0 Result Class [% class_name %]
.SH "AUTHOR"
.IX Header "AUTHOR"
[% author %]
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst::Controller::DBIC::API
Catalyst::Controller::DBIC::API::REST
Catalyst::Controller::DBIC::API::RPC
.SH "LICENSE"
.IX Header "LICENSE"
[% license %]
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 131:" 4
.IX Item "Around line 131:"
=back without =over
